#!/bin/bash -l
rfile=$1

#assume test will not complete
echo "error" > $homedir/test_results

export PATH=~/bin:$PATH

export TZ="/usr/share/zoneinfo/US/Mountain"

############################### Read the file for log directory and email recipient #######

datestamp=`date +%y%m`
logfile="${datestamp}_test"
echo " The logfile is $logfile"
export here=`pwd`



if grep -i "LOG_DIR1" $rfile > tmp
then
        read location log_dir log_tmp < tmp
        cd $log_dir
        if test ! -d $logfile
        then
                # Make new directory if doesn't exist
                mkdir $logfile
        fi
        cd $here
        echo "LOGDIR1 is $log_dir/$logfile"
        export LOGDIR=$log_dir/$logfile

fi

if grep -i "LOGDIR2" $rfile > tmp
then
        read location log_dir2 < tmp
        cd $log_dir2
        if test ! -d $logfile
        then
                mkdir $logfile
        fi
        cd $here

        echo "LOGDIR2 is $log_dir2/$logfile"
        export LOGDIR2=$log_dir2/$logfile

fi



if grep -i "email_to" $rfile > tmp
then
	read location emailuser < tmp
	echo "Email user is $emailuser"
fi

if grep -i "email_title" $rfile > tmp
then
	read location email_title < tmp
	echo "Email title is $email_title"
fi


rm -f tmp
rm -f $LOGDIR/header
rm -f $LOGDIR/mailMessage
rm -f $LOGDIR/summary

# Set test status as green, assume it will run clean
echo "Test_results:green" > $LOGDIR/Test_Status


#Set day of the week
echo "Day_of_Week:`date +%A`" > $LOGDIR/Day_Started

#Set Number of test failure
echo "0" > $LOGDIR/Test_Failures


echo "" >> $LOGDIR/header
echo "Script start time: `date`" >> $LOGDIR/header

############################### Extract script to checkout ESMF ###########################
cat  > exp_co << \THE-END-OF-EXP-CO
#!/usr/lpp/ssp/expect/bin/expect --

set sfuser [lindex $argv 0]
set tag [lindex $argv 1]
send_user " tag is $tag"

set timeout 3600

if { $tag == "" } {

	spawn  cvs -z3 -d:ext:$sfuser@esmf.cvs.sourceforge.net:/cvsroot/esmf co -P esmf

} else {

	spawn cvs -z3 -d:ext:$sfuser@esmf.cvs.sourceforge.net:/cvsroot/esmf co -P -r $tag esmf
}


expect {
	"password: "
			{

                                send "$sfpword\r"

                        }
        "(yes/no)?"
                        {

                                send "yes\r"

                                exp_continue


                        }
        "(yes/no)? "
                        {

                                send "yes\r"

                                exp_continue

                        }

        }



expect eof


THE-END-OF-EXP-CO


############################### Extract script to checkout ESMF ###########################
cat  > exp_git << \THE-END-OF-EXP-GIT
#!/usr/bin/expect --

set tag [lindex $argv 0]
send_user " tag is $tag"

set timeout 3600

#spawn git clone git://esmf.git.sourceforge.net/gitroot/esmf/esmf 
spawn git clone git://git.code.sf.net/p/esmf/esmf esmf
#spawn git clone silverio@nibs.cocoabean.org:/opt/projects/esmf.git

expect  eof


THE-END-OF-EXP-GIT

cat  > exp_git_utc << \THE-END-OF-EXP-GIT_UTC
#!/usr/bin/expect --

set tag [lindex $argv 0]
send_user " tag is $tag"

set timeout 900

#spawn git clone git://esmf.git.sourceforge.net/gitroot/esmf/use_test_cases 
spawn git clone git://git.code.sf.net/p/esmf/use_test_cases use_test_cases

expect  eof


THE-END-OF-EXP-GIT_UTC


cat  > git_tag << \THE-END-OF-GIT_TAG
#!/usr/bin/expect --

set tag [lindex $argv 0]
send_user " tag is $tag"

set timeout 900

spawn git checkout tags/$tag

expect  eof


THE-END-OF-GIT_TAG




############################### Extract script to checkout use test cases ###########################
cat  > exp_co_utc << \THE-END-OF-EXP-CO-UTC
#!/usr/lpp/ssp/expect/bin/expect --

set sfuser [lindex $argv 0]
set tag [lindex $argv 1]
send_user " tag is $tag"

set timeout 3600

if { $tag == "" } {

	spawn  cvs -z3 -d:ext:$sfuser@esmf.cvs.sourceforge.net:/cvsroot/esmf co -P use_test_cases

} else {

	spawn cvs -z3 -d:ext:$sfuser@esmf.cvs.sourceforge.net:/cvsroot/esmf co -P -r $tag use_test_cases
}


expect {
	"password: "
			{

                                send "$sfpword\r"

                        }
        "(yes/no)?"
                        {

                                send "yes\r"

                                exp_continue


                        }
        "(yes/no)? "
                        {

                                send "yes\r"

                                exp_continue

                        }

        }



expect eof


THE-END-OF-EXP-CO-UTC



############################### Parse the compute file and checkout esmf where indicated ##

number=1
while grep "^$number " $rfile >tmp
do
        read num location directory hostname abi site comp comm u_tests u_tests_type sys_test_type threaded procs ck_out_opt tag < tmp
        echo "$location $directory $hostname $abi $site $comp $comm $u_tests $u_tests_type $sys_test_type $threaded $procs $ck_out_opt $tag"
	if [[ $ck_out_opt = "co" ]]
	then
		umask 002
	 	export CVS_RSH=ssh
		export homedir=`pwd`
		cd $directory
		pwd
		rm -rf esmf
		export sfuser=svasquez
		# Execute the script to checkout the esmf
		#expect $homedir/exp_co $sfuser  $tag
		expect $homedir/exp_git
		# Check if checkout was successful
                # If the esmf directory does not exists 
                if test ! -d esmf 
                then
                	echo "Sleeping"
                       	sleep 900
			expect $homedir/exp_git
                       	#expect $homedir/exp_co $sfuser  $tag
               	else
			# Check for tag
			if [[ $tag != "" ]]             
                       	then
                       		cd esmf
                               	expect $homedir/git_tag $tag
                               	cd ..
                        fi
			# Check out the use test case directory
			cd esmf/src
			#expect $homedir/exp_co_utc $sfuser  $tag
			expect $homedir/exp_git_utc
                        if test ! -d use_test_cases 
			then
				cd $homedir
                        	echo "Unable to checkout the use test cases from SourceForge." > mailMessage
                       		echo "No tests were run" >> mailMessage
				#mail -s  $email_title $emailuser <  mailMessage
                        	# Set test status as blue, checkout failed.
                        	echo "Test_results:blue" > $LOGDIR/Test_Status
                        	cat $LOGDIR/Test_Status >> $LOGDIR/MailMessage
                        	mail -s ESMF_Use_Test_Cases_Pluto_gfortran silverio.vasquez@noaa.gov <  $LOGDIR/MailMessage
                        	mail -s ESMF_Use_Test_Cases_Pluto_gfortran esmf_test@noaa.gov < $LOGDIR/MailMessage
                        	rm -rf mailMessage
                        	echo "Checkout failed"
				echo "end of test script"
			else
				if [[ $tag != "" ]]
                               	then
                               		cd use_test_cases
                                       	expect $homedir/git_tag $tag
                                        cd ../..
                                fi
                        fi
							
		fi
		cd $homedir
	fi
	number=`expr $number + 1`
	echo "number = $number"
done

rm -f exp_co

 ############################### Extract script to checkout ESMF Contrib Site ###########################
 cat  > exp_co << \THE-END-OF-EXP-CO
 #!/usr/lpp/ssp/expect/bin/expect --

 set sfuser [lindex $argv 0]
 set sfpword [lindex $argv 1]
 set module [lindex $argv 2]
 
 set timeout 900

if { $module == "blackforest" || $module == "babyblue"|| $module == "bluesky"|| $module == "chinook" || $module == "longs" || $module == "mika" } { 
		set module "ncar"
	}
 
 spawn  cvs -z3 -d:ext:$sfuser@esmfcontrib.cvs.sourceforge.net:/cvsroot/esmfcontrib co $module
 
 expect {
       "password: "
                       {
 
                                 send "$sfpword\r"
 
                         }
         "(yes/no)?"
                         {
 
                                 send "yes\r"
 
                                 exp_continue
 
 
                         }
         "(yes/no)? "
                         {
 
                                 send "yes\r"
 
                                 exp_continue
 
                         }
 
         }
 
 
 
 expect eof
 
THE-END-OF-EXP-CO
 
 ############################### Parse the compute file and checkout esmf contrib  module where indicated ##
 
 number=1
 while grep "^$number " $rfile >tmp
 do
        read num location directory hostname abi site comp comm u_tests u_tests_type sys_test_type threaded procs ck_out_opt tag < tmp
        echo "$location $directory $hostname $abi $site $comp $comm $u_tests $u_tests_type $sys_test_type $threaded $procs $ck_out_opt $tag"
       if [[ $site != "default" ]]
       then
                umask 002
                export CVS_RSH=ssh
                export homedir=`pwd`
                cd $directory/esmf/build_config
		dir_size=`ls | wc -l`
		echo "dir_size = $dir_size"
                # Execute the script to checkout the esmfconfig
                expect $homedir/exp_co $sfuser $sfpword $site
               # Check if checkout was successful
                new_dir_size=`ls | wc -l`
		echo "new_dir_size = $new_dir_size"
		if [ $new_dir_size =  $dir_size ]
                then
			echo "Sleeping 10"
                        sleep 10
                        expect $homedir/exp_co $sfuser $sfpword $site
                        # Check if checkout was successful
                	new_dir_size=`ls | wc -l`
		else
			# Done if successfull
			break 
		fi
		if [ $new_dir_size =  $dir_size ]
                then
			echo "Sleeping 900"
                        sleep 900
                        expect $homedir/exp_co $sfuser $sfpword $site
                        # Check if checkout was successful
                	new_dir_size=`ls | wc -l`
		else
			# Done if successfull
			break 
		fi
		if [ $new_dir_size =  $dir_size ]
                then
			echo "Sleeping 1800"
                	sleep 1800
                        expect $homedir/exp_co $sfuser $sfpword $site
                        # Check if checkout was successful
                	new_dir_size=`ls | wc -l`
		else
			# Done if successfull
			break 
		fi
		if [ $new_dir_size =  $dir_size ]
                then
			echo "Sleeping 3600"
                	sleep 3600
                        expect $homedir/exp_co $sfuser $sfpword $site
                        # Check if checkout was successful
                	new_dir_size=`ls | wc -l`
		else
			# Done if successfull
			break 
		fi
		if [ $new_dir_size =  $dir_size ]
                then
                      	cd $homedir
                        echo "Unable to checkout ESMFCONTRIB from SourceForge." > mailMessage
                        echo "No tests were run" >> mailMessage
                        mail -s  $email_title $emailuser <  mailMessage
                        mail -s  $email_title esmf_test@list.woc.noaa.gov <  mailMessage
                        rm -rf mailMessage
			# Can't go any further
			rm -f $homedir/.outFile
			echo " CVS_Failure" > $homedir/test_results
                        exit
		else
			# Done if successfull
			break 
		fi
       fi
       number=`expr $number + 1`
       echo "number = $number"
 done
 
rm -f $homedir/.outFile
cd $homedir


################################### Extract testing info script  ################################
cat > get_testing_info << \TEST_INFO
#!/bin/ksh
# $1 is ESMF_DIR
echo " ESMF_DIR = $1"
cd $1

use_test_cases=`find . -name "*UseTestCase*" -type f -exec grep "\!USE_TEST_CASE" {} \; | wc -l`
use_test_casess=`expr $use_test_cases - 0`
find . -name "*UseTestCase*" -type f -exec grep "\!USE_TEST_CASE" {} \; -print > temp_file
grep  -v "USE_TEST_CASE" temp_file > $LOGDIR/utc_files
rm -f temp_file
sed 's/^.*\///' $LOGDIR/utc_files | sed 's/\..*$//' | sort > $LOGDIR/utcases_files


echo "$use_test_cases" > $LOGDIR/utc_num

TEST_INFO




############################### Extract test_esmf ########################################

cat > test_esmf << \BUILD-ESMF
#!/bin/bash -l
#PBS -eo -q reg -l nodes=1:ppn=1

cd $ESMF_DIR

#Clobber previous arch files
gmake -j4 clean_system_tests 1> tmp 2>&1

echo "" >> $LOGDIR/mailMessage
echo "__________________________________________________________________________" >> $LOGDIR/mailMessage
echo "" >> $LOGDIR/mailMessage


module list  1> tmp 2>&1
cat tmp >> $LOGDIR/mailMessage

echo "__________________________________________________________________________" >> $LOGDIR/mailMessage
echo "" >> $LOGDIR/mailMessage

utc_pass=0
utc_fail=0
utc_total=0
test_results=0

echo "`date` on `uname -n` " >> $LOGDIR/mailMessage
echo "Compiler and configuration information:" >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage

git remote -v 1> tmp 2>&1


if (grep -i "Not a git repository" tmp)
then
        #Checkout failed
        echo "Test_results:blue" > $LOGDIR/Test_Status
fi

echo "ESMF Repository:" >> $LOGDIR/mailMessage
cat tmp >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage
git describe --tags 1> tmp 2>&1
cat tmp >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage
cd src/use_test_cases

git remote -v 1> tmp 2>&1

echo " " >> $LOGDIR/mailMessage
echo "Use Test Cases  Repository:" >> $LOGDIR/mailMessage
cat tmp >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage
git describe --tags 1> tmp 2>&1
cat tmp >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage

cd $ESMF_DIR

gmake ESMF_BOPT=$OPT info >> $LOGDIR/mailMessage



if [[ $ESMF_COMM = "lam" ]]
then
	lamboot
fi #end of  if [[ $ESMF_COMM = "lam" ]]


gmake -j4 ESMF_BOPT=$OPT    1> tmp 2>&1
if [ "$?" != "0" ]
then
        echo "Library build FAIL with ESMF_BOPT=$OPT"

	if [ $OPT != g ]
	then 
		cat tmp > $LOGDIR/build_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER
	else
		cat tmp > $LOGDIR/build_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER
	fi #end of if [ $OPT != g ]

	echo "`date` library build -j4 ************FAIL" >> $LOGDIR/mailMessage
	test_results=1
	echo "" >> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage
	echo "The following is the 'tail' of the build failure">> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage
        tail  -50 tmp >> $LOGDIR/mailMessage
	which gcc > tmp
        echo "which gcc">> $LOGDIR/mailMessage
        cat tmp >> $LOGDIR/mailMessage



        # If checkout did not fail, set test status to red, build failed
        if !(grep "blue" $LOGDIR/Test_Status)
        then
                echo "Test_results:red" > $LOGDIR/Test_Status
                echo "Set Test Status to red."
        fi

else

       	echo "Library build PASS with ESMF_BOPT=$OPT"
	echo "`date` library build -j4 ............PASS" >> $LOGDIR/mailMessage

        # Check for warnings
        if grep -i "warning[ ]*:" tmp
        then
                echo "Builds with warnings." >> $LOGDIR/mailMessage
        fi

	# check if all files should be logged
	if [[ $LOGTMP = "ALL" ]]
	then
        	if [ $OPT != g ]
        	then 
                	cat tmp > $LOGDIR/build_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER
        	else    
                	cat tmp > $LOGDIR/build_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER
        	fi #end of if [ $OPT != g ]
	fi # end of if [[ $LOGTMP = "ALL" ]]

	echo "" >> $LOGDIR/mailMessage
	echo "|---------------------- USE TEST CASES ------------------------|" >> $LOGDIR/mailMessage

        gmake  ESMF_BOPT=$OPT  build_use_test_cases 1> tmp 2>&1
        if [ "$?" != "0" ]
        then
                echo "Use test case build FAILED with ESMF_BOPT=$OPT"

                if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/build_use_test_case_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER
                else
                        cat tmp > $LOGDIR/build_use_test_case_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER
                fi #end of if [ $OPT != g ]

                echo "`date` build_use_test_cases *********FAIL" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "The following is the 'tail' of the build_use_test_cases failure">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                tail  -50 tmp >> $LOGDIR/mailMessage
                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                fi



                else 
        
                echo "Use test case build PASSED with ESMF_BOPT=$OPT"
                echo "`date` build_use_test_cases .........PASS" >> $LOGDIR/mailMessage
        
		gmake dry_run_use_test_cases
                gmake ESMF_BOPT=$OPT  run_use_test_cases 1> tmp 2>&1
                if [ "$?" != "0" ]
                then
                        echo "run use test cases FAILED with ESMF_BOPT=$OPT"
    
                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/run_use_test_cases_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER
                        else
                                cat tmp > $LOGDIR/run_use_test_cases_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER
                        fi #end of if [ $OPT != g ]
        
                        echo "`date` run_use_test_cases ***********FAIL" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage  
                        echo "The following is the 'tail' of the run_use_test_cases failure">> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        tail  -50 tmp >> $LOGDIR/mailMessage
               		# Set test status as yellow, if it is not red
                	if !(grep "red" $LOGDIR/Test_Status)
                	then
                        	echo "Test_results:yellow" > $LOGDIR/Test_Status
                	fi


        
                        else 
                
                        echo "Run_use_test_cases PASSED with ESMF_BOPT=$OPT"
                        echo "`date` run_use_test_cases ...........PASS" >> $LOGDIR/mailMessage
                        
                fi 
        
        fi

	# Get the use test case test list file.
	find $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE -name "*UseTestCase.testlist" > utc_list_files
	# Read test lists and check if the use test cases passed or failed.
	for test_file in $(cat utc_list_files)
        do
		# open the file to read it
		exec 0<$test_file
		while read use_test_case_line 
		do
			echo $use_test_case_line > use_test_case_line_file
			sed 's/:/ /g' use_test_case_line_file > newLine
			read use_test_case proc  < newLine
			echo "use_test_case = $use_test_case proc = $proc "
        		echo "" >>  $LOGDIR/mailMessage
               		if grep "PASS" $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/$use_test_case.stdout$proc > NULL
               		then
				if [ $proc != "1" ]
				then 
					echo "$use_test_case on $proc processors PASS" >> $LOGDIR/mailMessage
				else
					echo "$use_test_case on $proc processor PASS" >> $LOGDIR/mailMessage
				fi # end of [ $proc != "1" ]
				echo "PASS" >> $LOGDIR/utc_results
			else
				cat $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/$use_test_case.stdout$proc > $LOGDIR/utc_$OPT_`date +%d`$ESMF_ABI$use_test_case.stdout$proc
				if [ $proc != "1" ]
				then 
					echo "$use_test_case on $proc processors **FAIL**" >> $LOGDIR/mailMessage
				else
					echo "$use_test_case on $proc processor **FAIL**" >> $LOGDIR/mailMessage
				fi #end of f [ $proc != "1" ]
				echo "FAIL" >> $LOGDIR/utc_results
                		# Set test status as yellow, if it is not red
                		if !(grep "red" $LOGDIR/Test_Status)
                		then
                        		echo "Test_results:yellow" > $LOGDIR/Test_Status
                		fi

			fi # end of if grep "PASS:"
                done
       		echo "" >>  $LOGDIR/mailMessage
        done
       	echo "" >>  $LOGDIR/mailMessage

	utc_fail=`grep FAIL $LOGDIR/utc_results | wc -l`
	utc_pass=`grep PASS $LOGDIR/utc_results | wc -l`
	utc_fail=`expr $utc_fail + 0`
	utc_pass=`expr $utc_pass + 0`
	utc_total=`expr $utc_fail + $utc_pass`
	echo "Ran $utc_total use test cases"  >> $LOGDIR/mailMessage
	echo "$utc_pass PASS $utc_fail FAIL"  >> $LOGDIR/mailMessage

	
	if [[ $utc_fail != 0 || $utc_pass = 0 ]]
        then
                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi
		# Update number of test failures
                read failures < $LOGDIR/Test_Failures
                total=`expr $failures + $utc_fail`
                echo "$total" > $LOGDIR/Test_Failures
                echo "New failure total is $total."
        fi




fi #end of if [ "$?" != "0" ] for gmake ESMF_BOPT=$OPT  1> tmp 2>&1

# Make name as short as possible
name=`uname -n | sed 's/\..*//'`

if [[ $test_results != 0 ]] 
then  #The build failed
        echo "**FAIL** $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI" >> $LOGDIR/summary
else
        echo "PASS $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI $utc_pass/$utc_fail" >> $LOGDIR/summary
fi #end of if [$test_results != 0]


if [[ $ESMF_COMM = "lam" ]]
then
	lamhalt
fi #end of  if [[ $ESMF_COMM = "lam" ]]

echo "" >> $LOGDIR/mailMessage

rm -f $LOGDIR/utc_results
rm -f utc_pass
rm -f utc_fail
rm -f tmp

# keep expect happy
echo "test_esmf has finished"
BUILD-ESMF

############################# Run the tests on all computers ###############################

export First_Build=NOT_DONE
number=1
while grep "^$number " $rfile >tmp
do
	# Get the computer information
        read num location directory hostname abi site comp comm u_tests u_tests_type sys_test_type threaded procs ck_out_opt tag < tmp
        echo "$location $directory $hostname $abi $site $comp $comm $u_tests $u_tests_type $sys_test_type $threaded $procs $ck_out_opt $tag"
        cat tmp

	export ESMF_OS=`uname -s`
	export ESMF_DIR=$directory/esmf
	export MP_RMPOOL=1
	export LOGTMP=$log_tmp
	export OPT=g
	export SYS_TEST_TYPE=$sys_test_type
	export U_TESTS=$u_tests
	export U_TESTS_TYPE=$u_tests_type
	export ESMF_ABI=$abi
	export ESMF_SITE=$site
	export ESMF_COMPILER=$comp
	export ESMF_COMM=$comm
	export ESMF_MAX_PROCS=$procs
        export MP_MPILIB=mpich2
        module load netcdf/4.6.0
        export MPIRUN=mpiexec_mpt
        export ESMF_MPIRUN=mpirun
        #export ESMF_NETCDF=split
        #export ESMF_NETCDF_LIBPATH=/glade/u/apps/ch/opt/netcdf/4.6.0/intel/17.0.1/lib
        #export ESMF_NETCDF_INCLUDE=/glade/u/apps/ch/opt/netcdf/4.6.0/intel/17.0.1/include

        module load pnetcdf/1.9.0
        #export ESMF_PNETCDF=standard
        #export ESMF_PNETCDF_LIBPATH=/glade/u/apps/ch/opt/pnetcdf/1.9.0/mpt/2.15f/intel/17.0.1/lib
        #export ESMF_PNETCDF_INCLUDE=/glade/u/apps/ch/opt/pnetcdf/1.9.0/mpt/2.15f/intel/17.0.1/include
        export ESMF_NETCDF=nc-config


       if [[ "$ESMF_COMM" = "mpich3" ]]
        then
                module use /usr/local/share/Modules/modulefiles/
                module load  gfortran/4.8.5/gcc/4.8.5/mpich3/3.2.1
                export ESMF_TESTHARNESS_FIELD=RUN_ESMF_TestHarnessField_default
                export ESMF_TESTHARNESS_ARRAY=RUN_ESMF_TestHarnessArray_default
        fi


        if [[ $ESMF_COMM = "mpiuni" ]]
        then
                export ESMF_TESTHARNESS_FIELD=RUN_ESMF_TestHarnessFieldUNI_1
                export ESMF_TESTHARNESS_ARRAY=RUN_ESMF_TestHarnessArrayUNI_2
	fi


        if [[ $threaded = "THREADED" ]]
        then
                export ESMF_TESTWITHTHREADS=ON 
        else
                export ESMF_TESTWITHTHREADS=OFF
        fi 
        if [[ $u_tests = "EX" ]]
        then
                export ESMF_TESTEXHAUSTIVE=ON
        else 
                export ESMF_TESTEXHAUSTIVE=OFF
        fi 
	mpd &

	export homedir=`pwd`
        export RFile=$rfile
	echo "ESMF_DIR = $ESMF_DIR"
	cd $ESMF_DIR
	chmod 777 $homedir/test_esmf
	export ESMF_NO_INTEGER_1_BYTE=TRUE
	export ESMF_NO_INTEGER_2_BYTE=TRUE
        $homedir/test_esmf

	export ESMF_BOPT=O
	export OPT=O
	$homedir/test_esmf
	cd $homedir
        number=`expr $number + 1`
        echo "number = $number"
done

cd $ESMF_DIR/..
#rm -rf esmf
cd $homedir
rm -f test_esmf
rm -f exp_co
rm -f tmp
echo "end of test script"
exit

