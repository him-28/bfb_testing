#!/bin/bash -l
#PBS -eo -q reg -l nodes=1:ppn=1

cd $ESMF_DIR

env

#Clobber previous arch files
gmake  clobber  1> tmp 2>&1


echo "" >> $LOGDIR/mailMessage
echo "_______________________________________________________________________________________________" >> $LOGDIR/mailMessage
echo "" >> $LOGDIR/mailMessage

test_results=0  #assume build passes
install_results=0  #assume install passes
tests=0
test_failures=0
ex_passed=0
ex_failed=0

echo "`date` on `uname -n` " >> $LOGDIR/mailMessage
# Get ESMF checkout source

read chkout_src <  ~/bin/esmf_chkout_src
#if read fails default:git://git.code.sf.net/p/esmf/esmf
if [ "$?" != "0" ]
then
        export chkout_src="https://github.com/esmf-org/esmf.git"
fi  
echo "" >> $LOGDIR/mailMessage
echo "ESMF Checkout Source: $chkout_src" >> $LOGDIR/mailMessage
echo "" >> $LOGDIR/mailMessage

echo "Compiler and configuration information:" >> $LOGDIR/mailMessage
echo "" >> $LOGDIR/mailMessage
echo "-------------------------------------------------------------- " >> $LOGDIR/mailMessage

module list  1> tmp 2>&1
cat tmp >> $LOGDIR/mailMessage

echo " " >> $LOGDIR/mailMessage

git remote -v  1> tmp 2>&1

if (grep -i "Not a git repository" tmp)
then
        #Checkout failed
        echo "Test_results:blue" > $LOGDIR/Test_Status
fi

echo "Repository:" >> $LOGDIR/mailMessage
cat tmp >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage
git describe --tags 1> tmp 2>&1
cat tmp >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage


echo " " >> $LOGDIR/mailMessage
gmake ESMF_BOPT=$OPT info 1> tmp 2>&1
cat tmp >> $LOGDIR/mailMessage



gmake ESMF_BOPT=$OPT  1> tmp 2>&1
if [ "$?" != "0" ]
then
        echo "Library build FAIL with ESMF_BOPT=$OPT"

	if [ $OPT != g ]
	then 
		cat tmp > $LOGDIR/build_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
	else
		cat tmp > $LOGDIR/build_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
	fi #end of if [ $OPT != g ]

	echo "`date` library build ****************FAIL" >> $LOGDIR/mailMessage
	test_results=1
	echo "" >> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage
	echo "The following is the 'tail' of the build failure">> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage
        tail  -50 tmp >> $LOGDIR/mailMessage



        # If checkout did not fail, set test status to red, build failed
        if !(grep "blue" $LOGDIR/Test_Status)
        then
                echo "Test_results:red" > $LOGDIR/Test_Status
                echo "Set Test Status to red."
        fi


else

       	echo "Library build PASS with ESMF_BOPT=$OPT"
	echo "`date` library build ................PASS" >> $LOGDIR/mailMessage

        # Check for warnings
        if grep -i "warning[ ]*:" tmp
        then
                echo "Builds with warnings." >> $LOGDIR/mailMessage
        fi

	# check if all files should be logged
	if [[ $LOGTMP = "ALL" ]]
	then
        	if [ $OPT != g ]
        	then 
                	cat tmp > $LOGDIR/build_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
        	else    
                	cat tmp > $LOGDIR/build_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
        	fi #end of if [ $OPT != g ]
	fi # end of if [[ $LOGTMP = "ALL" ]]


        gmake ESMF_BOPT=$OPT  install 1> tmp 2>&1
        if [ "$?" != "0" ]
        then
                echo "Library install FAILED with ESMF_BOPT=$OPT"
                install_results=1  # install failed

                if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/install_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                else
                        cat tmp > $LOGDIR/install_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                fi #end of if [ $OPT != g ]

                echo "`date` library install **************FAIL" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "The following is the 'tail' of the install failure">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                tail  -50 tmp >> $LOGDIR/mailMessage

                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi

	else

                echo "Library install PASSED with ESMF_BOPT=$OPT"
                echo "`date` library install ..............PASS" >> $LOGDIR/mailMessage

                gmake ESMF_BOPT=$OPT  installcheck 1> tmp 2>&1
                if [ "$?" != "0" ]
                then
                        echo "Library install check FAILED with ESMF_BOPT=$OPT"
                        install_results=1  # install failed

                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/installcheck_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/installcheck_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi #end of if [ $OPT != g ]

                        echo "`date` library installcheck *********FAIL" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "The following is the 'tail' of the install failure">> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        tail  -50 tmp >> $LOGDIR/mailMessage
                	# Set test status as yellow, if it is not red
                	if !(grep "red" $LOGDIR/Test_Status)
                	then
                        	echo "Test_results:yellow" > $LOGDIR/Test_Status
                        	echo "Set Test Status to yellow."
                	fi

		else

                        echo "Library install PASSED with ESMF_BOPT=$OPT"
                        echo "`date` library installcheck .........PASS" >> $LOGDIR/mailMessage

                fi

                gmake ESMF_BOPT=$OPT  build_quick_start 1> tmp 2>&1
                if [ "$?" != "0" ]
                then
                        echo "Quick start build check FAILED with ESMF_BOPT=$OPT"
                        quickstart_results=1  # install failed

                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/quickstart_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/quickstart_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi #end of if [ $OPT != g ]

                        echo "`date` quickstart build *************FAIL" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "The following is the 'tail' of the quickstart build  failure">> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        tail  -50 tmp >> $LOGDIR/mailMessage

                	# Set test status as yellow, if it is not red
                	if !(grep "red" $LOGDIR/Test_Status)
                	then
                        	echo "Test_results:yellow" > $LOGDIR/Test_Status
                        	echo "Set Test Status to yellow."
                	fi

		else

                        echo "Quickstart build passed with ESMF_BOPT=$OPT"
                        echo "`date` quickstart build .............PASS" >> $LOGDIR/mailMessage
                        quickstart_results=0  # quick_start passed

                fi

       		echo "" >> $LOGDIR/mailMessage

		echo "|--------------------------------- MAPL5_1 TESTS ---------------------------|" >> $LOGDIR/mailMessage
		export ESMFMKFILE=$ESMF_DIR/lib/lib$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/esmf.mk
        	gmake ESMF_BOPT=$OPT  install_mapl 1> tmp_$OPT 2>&1
        	if [ "$?" != "0" ]
        	then
        		echo "MAPL install check FAILED with ESMF_BOPT=$OPT"
                	mapl_install=FAIL  # install failed

                	if [ $OPT != g ]
                	then
                		cat tmp_$OPT > $LOGDIR/installmapl_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                	else
                		cat tmp_$OPT > $LOGDIR/installmapl_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                	fi #end of if [ $OPT != g ]

			echo "`date` MAPL5_1 install **************FAIL" >> $LOGDIR/mailMessage
                	echo "" >> $LOGDIR/mailMessage
                	echo "" >> $LOGDIR/mailMessage
                	echo "The following is the 'tail' of the MAPL5_1 install failure">> $LOGDIR/mailMessage
                	echo "" >> $LOGDIR/mailMessage
                	tail  -50 tmp >> $LOGDIR/mailMessage
                	# Set test status as yellow, if it is not red
                	if !(grep "red" $LOGDIR/Test_Status)
                	then
                		echo "Test_results:yellow" > $LOGDIR/Test_Status
                        	echo "Set Test Status to yellow."
                	fi

		else

       			echo "MAPL install PASSED with ESMF_BOPT=$OPT"
                	echo "`date` MAPL5_1 install ..............PASS" >> $LOGDIR/mailMessage

                	mapl_install=PASS  # install failed

                	export pass_num=0

        		gmake ESMF_BOPT=$OPT  build_mapl_tests 1> tmp_$OPT 2>&1
        		if [ "$?" != "0" ]
			then
                		echo "MAPL build tests FAILED with ESMF_BOPT=$OPT"
                		# Set test status as yellow, if it is not red
                		if !(grep "red" $LOGDIR/Test_Status)
                		then
                        		echo "Test_results:yellow" > $LOGDIR/Test_Status
                        		echo "Set Test Status to yellow."
                		fi

                		if [ $OPT != g ]
                		then
                        		cat tmp_$OPT > $LOGDIR/installmapl_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                		else
                        		cat tmp_$OPT > $LOGDIR/installmapl_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                		fi #end of if [ $OPT != g ]

                		echo "`date` MAPL5_1 build tests **********FAIL" >> $LOGDIR/mailMessage
                		echo "" >> $LOGDIR/mailMessage
                		echo "" >> $LOGDIR/mailMessage
                		echo "The following is the 'tail' of the MAPL5_1 Build Tests failure">> $LOGDIR/mailMessage
                		echo "" >> $LOGDIR/mailMessage
                		tail  -50 tmp >> $LOGDIR/mailMessage
                		# Set test status as yellow, if it is not red
                		if !(grep "red" $LOGDIR/Test_Status)
                		then
                        		echo "Test_results:yellow" > $LOGDIR/Test_Status
                        		echo "Set Test Status to yellow."
                		fi
			else
                		echo "MAPL build tests PASSED with ESMF_BOPT=$OPT"
                		echo "`date` MAPL5_1 build tests ..........PASS" >> $LOGDIR/mailMessage

        			$homedir/exec_test apps_test $ESMF_DIR $OPT $ESMF_COMM apps_test $SYS_TEST_TYPE $U_TESTS_TYPE $U_TESTS $THREADED $LOGDIR $APPSDIR
        			#check if queue was available
        			if !(grep "passed" queue_results)
        			then
                			# Set test status as yellow, if it is not red
                			if !(grep "red" $LOGDIR/Test_Status)
                			then
                        			echo "Test_results:yellow" > $LOGDIR/Test_Status
                        			echo "Set Test Status to yellow."
                			fi
                			echo "Queue not available "
                			echo "`date` Queue not available **********FAIL" >> $LOGDIR/mailMessage
					export test_pass=0
                                	export test_fail=0
        			else
	
                                	if [[ $U_TESTS_TYPE = "UNI" ]]
                                	then
                                        	echo "run_mapl_tests_uni PASS "
                                        	echo "`date` MAPL5_1 run tests uni ........PASS" >> $LOGDIR/mailMessage
                                	else
                                        	echo "run_test PASS "
                                        	echo "`date` MAPL5_1 run tests ............PASS" >> $LOGDIR/mailMessage
                                	fi # end of if [[ $U_TESTS_TYPE = "UNI" ]]
                                	if [[ $LOGTMP = "ALL" ]]
                                	then
                                        	if [ $OPT != g ]
                                        	then
                                                	cat tmp > $LOGDIR/build_O_`date +%d``uname -n`run_mapl_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER
                                        	else
                                                	cat tmp > $LOGDIR/build_g_`date +%d``uname -n`run_mapl_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER
                                        	fi #end of if [ $OPT != g ]
                                	fi # end of if [[ $LOGTMP = "ALL" ]]


                                	echo "" >> $LOGDIR/mailMessage
                                	echo "" >> $LOGDIR/mailMessage
	

                                	gmake check_mapl_tests >> $LOGDIR/mailMessage
                                	read pass test_pass fail test_fail < $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/mapl_tests_results

					#make tarballs of test directories
                			mkdir test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
                			cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*stdout test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
                			cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*Log test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
                			tar --atime-preserve='replace' -cf test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
                			gzip test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar
                			mv -f test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar.gz $LOGDIR/.
                			rm -rf test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM

                                	if [[ $test_fail != 0 ]]
                                	then
                                        	# Set test status as yellow, if it is not red
                                        	if !(grep "red" $LOGDIR/Test_Status)
                                        	then
                                                	echo "Test_results:yellow" > $LOGDIR/Test_Status
                                                	echo "Set Test Status to yellow."
                                        	fi
                                        	# Update number of test failures
                                        	read failures < $LOGDIR/Test_Failures
                                        	total=`expr $failures + $test_fail`
                                        	echo "$total" > $LOGDIR/Test_Failures
                                        	echo "New failure total is $total."
	
                                	fi

				fi
			fi
		fi

	fi


fi #end of if [ "$?" != "0" ] for gmake ESMF_BOPT=$OPT  1> tmp 2>&1

# Make name as short as possible
name=`uname -n | sed 's/\..*//'`


if [[ $test_results != 0 ]] 
then  #The build failed
        echo "**FAIL** $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI" >> $LOGDIR/summary
else
        if [[ $install_results != 0 ]]
        then  #The install failed
                echo "PASS FAIL $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI  $mapl_install $test_pass/$test_fail" >> $LOGDIR/summary
        else
                echo "PASS PASS $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI  $mapl_install $test_pass/$test_fail" >> $LOGDIR/summary
        fi
fi #end of if [$test_results != 0]


echo "" >> $LOGDIR/mailMessage


# keep expect happy
echo "test_esmf has finished"

